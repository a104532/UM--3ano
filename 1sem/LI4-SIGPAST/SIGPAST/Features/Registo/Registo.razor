@page "/registo"
@rendermode InteractiveServer
@using DataAccessLibrary
@using DataAccessLibrary.Interfaces
@using DataAccessLibrary.Models
@using Microsoft.AspNetCore.Mvc
@using System;
@using System.Globalization;
@using System.Text.RegularExpressions;
@using SIGPAST.Pages
@inject IUtilizadoresData _db
@inject NavigationManager navManager

<PageTitle>Registo</PageTitle>

<Home />

<div class="overlay">
	<div class="outer-registo">
		<div class="logo">
			<a href="/">
				<img src="/images/logo.png" width="40px" height="40px" />
			</a>
		</div>

		<div class="form-row">
			<input type="text" id="nome" name="nome" placeholder="Nome" required @bind="nome">
		</div>

		@if (problemaNome)
		{
			<p class="error-message">Nome inserido inválido.</p>
		}

		<div class="form-row">
			<input type="text" id="morada" name="morada" placeholder="Morada" required @bind="morada">
		</div>

		@if (problemaMorada)
		{
			<p class="error-message">Morada inserida inválida.</p>
		}

		<div class="form-row">
			<input type="text" id="dataNascimento" name="dataNascimento" placeholder="Data de nascimento (dd/mm/aaaa)" required @bind="dataNascimento">
		</div>

		@if (problemaDataNascimento)
		{
			<p class="error-message">Data inserida inválida.</p>
		}

		<div class="form-row">
			<input type="text" id="telefone" name="telefone" placeholder="Telefone" required @bind="telefone">
		</div>

		@if (problemaTelefone)
		{
			<p class="error-message">Número de telefone inserido inválido.</p>
		}

		<div class="form-row">
			<input type="text" id="iban" name="inputiban" placeholder="IBAN (opcional)" @bind="iban">
		</div>

		@if (problemaIban)
		{
			<p class="error-message">IBAN inserido inválido.</p>
		}

		<div class="form-row form-email">
			<input type="email" id="email" name="inputEmail" placeholder="👤 Email" required @bind="email">
		</div>

		@if (problemaEmail)
		{
			<p class="error-message">Email inserido inválido.</p>
		}

		<div class="form-row">
			<input type="password" id="password" name="password" placeholder="🔑 Password" required @bind="password">
		</div>

		@if (problemaPassword)
		{
			<p class="error-message">Password inserida inválida.</p>
		}

		<div class="form-row">
			<input type="password" id="confirmpassword" name="confirmpassword" placeholder="🔑 Confirmar password" required @bind="confirmPassword">
		</div>

		@if (problemaConfirmPassword)
		{
			<p class="error-message">Password inserida inválida.</p>
		}

		<button class="submit-button" @onclick="RegistarUtilizador">Criar conta</button>
	</div>
</div>


@code {
	public string nome { get; set; } = "";
	public string morada { get; set; } = "";
	public string dataNascimento { get; set; } = "";
	public string telefone { get; set; } = "";
	public string iban { get; set; } = "";
	public string email { get; set; } = "";
	public string password { get; set; } = "";
	public string confirmPassword { get; set; } = "";

	public bool problemaNome = false;
	public bool problemaMorada = false;
	public bool problemaDataNascimento = false;
	public bool problemaTelefone = false;
	public bool problemaIban = false;
	public bool problemaEmail = false;
	public bool problemaPassword = false;
	public bool problemaConfirmPassword = false;

	private DateTime dateValue;

	public async Task RegistarUtilizador()
	{
		resetBools();
		bool problema = checkFields();

		Utilizador utilizador = await _db.findUtilizador(email);

		if(utilizador != null){
			problemaEmail = true;
			return;
		}
		if(!problema){
			string tipo = "cliente";

			Utilizador novoUtilizador = new Utilizador(email, password, nome, dateValue, telefone, iban, morada,tipo);
			await _db.insertUtilizador(novoUtilizador);
			navManager.NavigateTo("/UserHome", true);
		}
	}

	private void resetBools(){
		problemaNome = false;
		problemaMorada = false;
		problemaDataNascimento = false;
		problemaTelefone = false;
		problemaIban = false;
		problemaEmail = false;
		problemaPassword = false;
		problemaConfirmPassword = false;
	}

	private bool checkFields(){
		if (nome == "" || nome.Length > 45)
		{
			problemaNome = true;
		}
		if (morada == "" || nome.Length > 100)
		{
			problemaMorada = true;
		}
		if (dataNascimento == "")
		{
			problemaDataNascimento = true;
		}
		if (telefone == "")
		{
			problemaTelefone = true;
		}
		if (email == "" || email.Length > 45)
		{
			problemaEmail = true;
		}
		if (password == "" || password.Length > 45)
		{
			problemaPassword = true;
		}
		if (confirmPassword == "" || confirmPassword.Length > 45)
		{
			problemaConfirmPassword = true;
		}

		string emailRegex = @"^((([a-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+(\.([a-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+)*)|((\x22)((((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(([\x01-\x08\x0b\x0c\x0e-\x1f\x7f]|\x21|[\x23-\x5b]|[\x5d-\x7e]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(\\([\x01-\x09\x0b\x0c\x0d-\x7f]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]))))*(((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(\x22)))@((([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.)+(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.?$";
		if (!Regex.IsMatch(email, emailRegex, RegexOptions.IgnoreCase)){
			problemaEmail = true;
		}

		if(iban.Length > 25)
		{
			problemaIban = true;
		}

		if (!DateTime.TryParseExact(dataNascimento, "dd/MM/yyyy",new CultureInfo("pt-PT"), DateTimeStyles.None, out dateValue))
		{
			problemaDataNascimento = true;
		}

		if (telefone.Length != 9 || !telefone.All(char.IsDigit))
		{
			problemaTelefone = true;
		}

		if (confirmPassword != password)
		{
			problemaConfirmPassword = true;
		}

		return problemaConfirmPassword || problemaDataNascimento || problemaEmail || problemaIban || problemaMorada || problemaNome || problemaPassword || problemaTelefone;
	}
}